generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model Hero {
  id        Int      @id @default(autoincrement())
  lang      String   @unique
  name      String
  initials  String
  bio       String
  roles     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resumes   Resume[]
  socials   Social[]
}

model Social {
  id       Int    @id @default(autoincrement())
  platform String
  url      String
  heroId   Int
  hero     Hero   @relation(fields: [heroId], references: [id], onDelete: Cascade)

  @@unique([heroId, platform])
}

model Resume {
  id       Int    @id @default(autoincrement())
  lang     String @unique
  filename String
  path     String
  heroId   Int
  hero     Hero   @relation(fields: [heroId], references: [id], onDelete: Cascade)
}

model About {
  id           Int                @id @default(autoincrement())
  lang         String             @unique
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  descriptions AboutDescription[]
  features     AboutFeature[]
  skills       AboutSkill[]
}

model AboutDescription {
  id      Int    @id @default(autoincrement())
  content String
  aboutId Int
  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)

  @@unique([aboutId, content])
}

model AboutSkill {
  id      Int    @id @default(autoincrement())
  name    String
  aboutId Int
  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)

  @@unique([aboutId, name])
}

model AboutFeature {
  id          Int    @id @default(autoincrement())
  icon        String
  title       String
  description String
  aboutId     Int
  about       About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)

  @@unique([aboutId, title])
}

model ContactInfo {
  id        Int             @id @default(autoincrement())
  lang      String          @unique
  email     String
  phone     String
  location  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  socials   ContactSocial[]
}

model ContactSocial {
  id            Int         @id @default(autoincrement())
  platform      String
  url           String
  contactInfoId Int
  contactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id], onDelete: Cascade)

  @@unique([contactInfoId, platform])
}

model Experience {
  id          Int              @id @default(autoincrement())
  lang        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  courses     CourseItem[]
  education   EducationItem[]
  experiences ExperienceItem[]
}

model ExperienceItem {
  id           Int                    @id @default(autoincrement())
  title        String
  company      String
  period       String
  description  String
  experienceId Int
  experience   Experience             @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  technologies ExperienceTechnology[]
}

model ExperienceTechnology {
  id               Int            @id @default(autoincrement())
  name             String
  experienceItemId Int
  experienceItem   ExperienceItem @relation(fields: [experienceItemId], references: [id], onDelete: Cascade)

  @@unique([experienceItemId, name])
}

model EducationItem {
  id           Int        @id @default(autoincrement())
  degree       String
  school       String
  period       String
  description  String
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
}

model CourseItem {
  id           Int        @id @default(autoincrement())
  name         String
  org          String
  year         String
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@unique([experienceId, name, org])
}

model Project {
  id        Int           @id @default(autoincrement())
  lang      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  projects  ProjectItem[]
}

model ProjectItem {
  id           Int                 @id @default(autoincrement())
  title        String
  description  String
  image        String?
  liveUrl      String?
  githubUrl    String?
  projectId    Int
  project      Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technologies ProjectTechnology[]

  @@unique([projectId, title])
}

model ProjectTechnology {
  id            Int         @id @default(autoincrement())
  name          String
  projectItemId Int
  projectItem   ProjectItem @relation(fields: [projectItemId], references: [id], onDelete: Cascade)

  @@unique([projectItemId, name])
}

model Skill {
  id         Int             @id @default(autoincrement())
  lang       String          @unique
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  categories SkillCategory[]
}

model SkillCategory {
  id      Int         @id @default(autoincrement())
  title   String
  skillId Int
  skill   Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skills  SkillItem[]

  @@unique([skillId, title])
}

model SkillItem {
  id              Int           @id @default(autoincrement())
  name            String
  level           Int           @default(0)
  skillCategoryId Int
  skillCategory   SkillCategory @relation(fields: [skillCategoryId], references: [id], onDelete: Cascade)

  @@unique([skillCategoryId, name])
}

model ContactSubmission {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  subject     String
  message     String
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("contact_submissions")
}

model Suggestion {
  id        String   @id @default(cuid())
  name      String   @unique(map: "suggestion_name_unique")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suggestions")
}
