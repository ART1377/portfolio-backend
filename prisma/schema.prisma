// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Hero {
  id        Int      @id @default(autoincrement())
  lang      String   // 'en' or 'fa'
  name      String
  initials  String
  bio       String
  roles     String   // Stored as JSON string in SQLite
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  socials   Social[] // Relation to Social
  resumes   Resume[] // Relation to Resume

  @@unique([lang])
}

model Social {
  id        Int      @id @default(autoincrement())
  platform  String   // 'github', 'linkedin', 'email'
  url       String
  heroId    Int
  hero      Hero     @relation(fields: [heroId], references: [id], onDelete: Cascade)

  @@unique([heroId, platform])
}

model Resume {
  id        Int      @id @default(autoincrement())
  lang      String   // 'en' or 'fa'
  filename  String
  path      String
  heroId    Int
  hero      Hero     @relation(fields: [heroId], references: [id], onDelete: Cascade)

  @@unique([lang])
}

model About {
  id        Int      @id @default(autoincrement())
  lang      String   // 'en' or 'fa'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  descriptions AboutDescription[]
  skills       AboutSkill[]
  features     AboutFeature[]

  @@unique([lang])
}

model AboutDescription {
  id      Int    @id @default(autoincrement())
  content String
  aboutId Int
  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)

  @@unique([aboutId, content])
}

model AboutSkill {
  id      Int    @id @default(autoincrement())
  name    String
  aboutId Int
  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)

  @@unique([aboutId, name])
}

model AboutFeature {
  id          Int    @id @default(autoincrement())
  icon        String
  title       String
  description String
  aboutId     Int
  about       About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)

  @@unique([aboutId, title])
}

// prisma/schema.prisma

model ContactInfo {
  id        Int      @id @default(autoincrement())
  lang      String   // 'en' or 'fa'
  email     String
  phone     String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  socials ContactSocial[]

  @@unique([lang])
}

model ContactSocial {
  id           Int         @id @default(autoincrement())
  platform     String      // 'github', 'linkedin', 'telegram'
  url          String
  contactInfoId Int
  contactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id], onDelete: Cascade)

  @@unique([contactInfoId, platform])
}

// prisma/schema.prisma

model Experience {
  id          Int      @id @default(autoincrement())
  lang        String   // 'en' or 'fa'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  experiences ExperienceItem[]
  education   EducationItem[]
  courses     CourseItem[]

  @@unique([lang])
}

model ExperienceItem {
  id           Int      @id @default(autoincrement())
  title        String
  company      String
  period       String
  description  String
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  technologies ExperienceTechnology[]
}

model ExperienceTechnology {
  id               Int             @id @default(autoincrement())
  name             String
  experienceItemId Int
  experienceItem   ExperienceItem  @relation(fields: [experienceItemId], references: [id], onDelete: Cascade)

  @@unique([experienceItemId, name])
}

model EducationItem {
  id           Int      @id @default(autoincrement())
  degree       String
  school       String
  period       String
  description  String
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
}

model CourseItem {
  id           Int      @id @default(autoincrement())
  name         String
  org          String
  year         String
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@unique([experienceId, name, org])
}

// prisma/schema.prisma

model Project {
  id          Int      @id @default(autoincrement())
  lang        String   // 'en' or 'fa'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects ProjectItem[]

  @@unique([lang])
}

model ProjectItem {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  liveUrl     String?
  githubUrl   String?
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  technologies ProjectTechnology[]

  @@unique([projectId, title])
}

model ProjectTechnology {
  id           Int         @id @default(autoincrement())
  name         String
  projectItemId Int
  projectItem   ProjectItem @relation(fields: [projectItemId], references: [id], onDelete: Cascade)

  @@unique([projectItemId, name])
}

// prisma/schema.prisma

model Skill {
  id        Int      @id @default(autoincrement())
  lang      String   // 'en' or 'fa'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories SkillCategory[]

  @@unique([lang])
}

model SkillCategory {
  id      Int    @id @default(autoincrement())
  title   String
  skillId Int
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  skills SkillItem[]

  @@unique([skillId, title])
}

model SkillItem {
  id              Int           @id @default(autoincrement())
  name            String
  level           Int           @default(0) // 0-100
  skillCategoryId Int
  skillCategory   SkillCategory @relation(fields: [skillCategoryId], references: [id], onDelete: Cascade)

  @@unique([skillCategoryId, name])
}

// prisma/schema.prisma

model ContactSubmission {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  subject     String
  message     String
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("contact_submissions")
}

// prisma/schema.prisma

// prisma/schema.prisma
// prisma/schema.prisma

model Suggestion {
  id        String   @id @default(cuid())
  name      String   @unique(map: "suggestion_name_unique") // Custom constraint name
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suggestions")
}